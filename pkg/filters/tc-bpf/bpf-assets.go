// Code generated by go-bindata. DO NOT EDIT.
// sources:
// datapath/bpf.o

package tcbpf


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataDatapathBpfo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\xcd\xca\xd3\x40\x14\x3d\x99\xb4\xb6\xb5\x5a\x6c\x2b\x58\x45\x44\x6c\x17\x22\x18\x8a\x52\x77\x42\x2d\xf8\x03\x06\xac\x62\xb1\xae\x42\x1a\xa6\x3f\x90\x68\x4d\xb2\x50\x11\x74\x23\xf8\x02\xbe\x80\x2b\xdf\xa0\xcb\xfa\x18\x2e\x5d\xba\xac\x2b\x8b\x08\xf9\xc8\xe4\x4e\x1b\xa6\x29\xb9\xd0\xdc\x9c\xd3\xfb\x33\xe7\x24\xf9\x78\xdf\x7c\xc0\x34\x0d\x32\x34\xfc\xc5\x1e\xed\xe3\x27\xdb\xdf\xf7\xe9\x7a\x1a\x1a\x56\xc4\xd9\x8d\x61\x92\xeb\xa6\xc8\xeb\x66\xc2\x97\x74\xa0\x06\xe0\x66\xfb\xc2\x01\x7f\x4d\xf0\xe7\x05\x7e\xd3\x38\x2b\xf2\x8c\x01\xe5\x18\x37\xcf\x08\xfc\xe4\x56\x52\xff\x82\x01\x51\x04\x8c\x58\x4d\xfc\xbf\x62\xc0\x55\x00\xce\x8d\x6d\x94\xec\xbd\x22\xea\x9c\x4b\xff\x05\x5e\x7f\xa3\x3d\x0c\xd8\x46\x51\xd4\x52\x44\x7d\x16\x5a\x81\x35\xf1\x2b\xc2\x23\xf2\x42\xea\x9a\x01\x88\xa5\x7f\x25\x5c\x45\x72\xbe\x02\x80\x4f\x9b\x7f\x4c\x8e\x4d\xd9\x83\x87\x43\x13\xe7\xa4\x9f\xef\x9f\xa1\xfc\xa1\xaa\xc5\x6a\x5a\xf4\x93\xb1\xc9\xf0\x59\x8d\xc7\x62\xd7\x9f\x48\xe5\xe7\xe2\xaa\xe3\x97\xc2\xdb\xc4\xff\xce\x98\xa5\x43\x3f\xe0\x6e\x03\xa8\xe3\xd4\x0e\x17\x28\x5f\x17\x7c\x71\xc7\x77\x28\x5f\x04\xd0\x48\xcd\x91\x1a\xbe\x53\x8e\xfd\x88\xa7\x5d\x4e\x61\x31\xd3\x08\xf9\xdb\x10\x86\xcf\xdd\xe9\xc2\x0d\xb9\x6f\xf1\x99\xcf\x83\x00\xa1\x23\xef\x3c\x7b\x19\xc0\x5d\x7a\x56\x52\x00\xcb\x72\x17\x0e\x7f\x15\x70\xd1\x65\xf0\xb9\x35\xf5\x6d\x8f\x63\xb2\x9c\x1a\x0e\x8c\x20\xf4\x43\x7b\x02\x23\x78\xe7\xc5\xd9\x1c\x0c\xba\xd6\x9d\x24\xf5\x72\x6d\xcd\x8d\xa7\xc2\xaf\xc3\x98\xd3\x83\x7e\xad\xf0\xea\x37\xa3\xa5\xbc\x48\x47\xff\xc8\xbe\x82\x82\xab\x39\xfd\xea\xbb\x53\x56\x70\x09\x40\x25\x63\xcf\x23\x3a\xbf\x7c\x3f\x2b\xa4\x53\xf6\x4b\xbe\x4d\xfb\x55\x0f\xba\x24\xb4\x93\x73\xfe\xde\x91\xfe\xe7\x5a\x76\xbd\xea\xdf\x3d\xe2\x98\xc2\x8f\xa9\xb0\xab\xf0\xaa\xfe\xbb\x47\xf4\x8f\x33\xf4\x97\x32\xf4\xbf\xcc\xd8\x1d\xc7\x17\xda\xff\x23\x75\xee\x62\xaa\x5f\x7e\xdf\x27\x01\x00\x00\xff\xff\x35\x88\x0f\xb3\x58\x05\x00\x00")

func bindataDatapathBpfoBytes() ([]byte, error) {
	return bindataRead(
		_bindataDatapathBpfo,
		"datapath/bpf.o",
	)
}



func bindataDatapathBpfo() (*asset, error) {
	bytes, err := bindataDatapathBpfoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "datapath/bpf.o",
		size: 1368,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"datapath/bpf.o": bindataDatapathBpfo,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"datapath": {Func: nil, Children: map[string]*bintree{
		"bpf.o": {Func: bindataDatapathBpfo, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
